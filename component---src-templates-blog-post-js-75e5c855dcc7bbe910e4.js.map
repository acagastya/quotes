{"version":3,"sources":["webpack:///./src/templates/blogPost.js"],"names":["repo","siteMetadata","query","Article","attributed","author","html","lang","misattributed","tags","unverified","className","dangerouslySetInnerHTML","__html","Footer","to","length","map","tag","index","Fragment","key","Template","markdownRemark","data","frontmatter","path","title","showHeader","heading","blog"],"mappings":"2FAAA,kIAOQA,EAASC,eAATD,KAgCD,IAAME,EAAK,aAkBlB,SAASC,EAAT,GAQI,IAPFC,EAOC,EAPDA,WACAC,EAMC,EANDA,OACAC,EAKC,EALDA,KACAC,EAIC,EAJDA,KACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAEA,OACE,6BAASH,KAAMA,EAAMI,UAAU,SAC7B,yBACEA,UAAU,gBACVC,wBAAyB,CAAEC,OAAQP,KAErC,kBAACQ,EAAD,CACEV,WAAYA,EACZC,OAAQA,EACRG,cAAeA,EACfC,KAAMA,EACNC,WAAYA,KAMpB,SAASI,EAAT,GAA0E,IAAxDV,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,OAAQG,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACzD,OACE,4BAAQC,UAAU,0BAChB,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,qBACd,kBAAC,IAAD,OAEF,0BAAMA,UAAU,iBAAhB,YACA,kBAAC,OAAD,CAAMA,UAAU,SAASI,GAAOf,EAAL,YAAqBK,GAC7CA,GAEFD,EACC,8BACE,6BACE,mCAGF,KACHI,EACC,8BACE,6BACE,mCAGF,KACHE,EACC,8BACE,6BACE,mCAGF,MAELD,EAAKO,OACJ,yBAAKL,UAAU,QACb,0BAAMA,UAAU,qBACd,kBAAC,IAAD,OAEF,0BAAMA,UAAU,iBAAhB,UACCF,EAAKQ,KAAI,SAACC,EAAKC,GACd,OACE,kBAAC,IAAMC,SAAP,CAAgBC,IAAKH,GACnB,kBAAC,OAAD,CAAMP,UAAU,MAAMI,GAAOf,EAAL,SAAkBkB,GACvCA,GAEFC,EAAQV,EAAKO,OAAS,EAAI,KAAO,SAKxC,OAMGM,UAnIf,YAA6B,IACnBC,EADkB,EAARC,KACVD,eACAE,EAAsBF,EAAtBE,YAAanB,EAASiB,EAATjB,KAEnBF,EAQEqB,EARFrB,WACAC,EAOEoB,EAPFpB,OALwB,EAYtBoB,EANFlB,YANwB,MAMjB,KANiB,EAOxBC,EAKEiB,EALFjB,cACAkB,EAIED,EAJFC,KACAjB,EAGEgB,EAHFhB,KACAkB,EAEEF,EAFFE,MACAjB,EACEe,EADFf,WAEF,OACE,kBAAC,IAAD,CAAQkB,YAAY,EAAOC,QAASF,GAClC,kBAAC,IAAD,CAAKG,MAAM,EAAMJ,KAAMA,EAAMjB,KAAMA,EAAMkB,MAAOA,IAChD,kBAACxB,EAAD,CACEC,WAAYA,EACZC,OAAQA,EACRC,KAAMA,EACNC,KAAMA,EACNC,cAAeA,EACfC,KAAMA,EACNkB,MAAOA,EACPjB,WAAYA","file":"component---src-templates-blog-post-js-75e5c855dcc7bbe910e4.js","sourcesContent":["import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { CategorySVG, TagSVG } from '../components/partials/SVGIcon';\nimport { siteMetadata } from '../../gatsby-config';\n\nconst { repo } = siteMetadata;\n\nfunction Template({ data }) {\n  const { markdownRemark } = data;\n  const { frontmatter, html } = markdownRemark;\n  const {\n    attributed,\n    author,\n    lang = 'en',\n    misattributed,\n    path,\n    tags,\n    title,\n    unverified,\n  } = frontmatter;\n  return (\n    <Layout showHeader={false} heading={title}>\n      <SEO blog={true} path={path} tags={tags} title={title} />\n      <Article\n        attributed={attributed}\n        author={author}\n        html={html}\n        lang={lang}\n        misattributed={misattributed}\n        tags={tags}\n        title={title}\n        unverified={unverified}\n      />\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query($pathSlug: String!) {\n    markdownRemark(frontmatter: { path: { eq: $pathSlug } }) {\n      html\n      frontmatter {\n        attributed\n        author\n        lang\n        misattributed\n        path\n        tags\n        title\n        unverified\n      }\n    }\n  }\n`;\n\nfunction Article({\n  attributed,\n  author,\n  html,\n  lang,\n  misattributed,\n  tags,\n  unverified,\n}) {\n  return (\n    <article lang={lang} className=\"entry\">\n      <div\n        className=\"entry-content\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n      <Footer\n        attributed={attributed}\n        author={author}\n        misattributed={misattributed}\n        tags={tags}\n        unverified={unverified}\n      />\n    </article>\n  );\n}\n\nfunction Footer({ attributed, author, misattributed, tags, unverified }) {\n  return (\n    <footer className=\"entry-footer-container\">\n      <div className=\"entry-footer\">\n        <div className=\"categories\">\n          <span className=\"taxonomyTerm-icon\">\n            <CategorySVG />\n          </span>\n          <span className=\"screen-reader\">Author: </span>\n          <Link className=\"author\" to={`${repo}/authors/${author}`}>\n            {author}\n          </Link>\n          {attributed ? (\n            <span>\n              <sup>\n                <em>!</em>\n              </sup>\n            </span>\n          ) : null}\n          {misattributed ? (\n            <span>\n              <sup>\n                <em>?</em>\n              </sup>\n            </span>\n          ) : null}\n          {unverified ? (\n            <span>\n              <sup>\n                <em>#</em>\n              </sup>\n            </span>\n          ) : null}\n        </div>\n        {tags.length ? (\n          <div className=\"tags\">\n            <span className=\"taxonomyTerm-icon\">\n              <TagSVG />\n            </span>\n            <span className=\"screen-reader\">Tags: </span>\n            {tags.map((tag, index) => {\n              return (\n                <React.Fragment key={tag}>\n                  <Link className=\"tag\" to={`${repo}/tags/${tag}`}>\n                    {tag}\n                  </Link>\n                  {index < tags.length - 1 ? ', ' : ' '}\n                </React.Fragment>\n              );\n            })}\n          </div>\n        ) : null}\n      </div>\n    </footer>\n  );\n}\n\nexport default Template;\n"],"sourceRoot":""}